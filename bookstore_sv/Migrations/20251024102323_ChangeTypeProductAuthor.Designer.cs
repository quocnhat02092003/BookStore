// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace bookstore_sv.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024102323_ChangeTypeProductAuthor")]
    partial class ChangeTypeProductAuthor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Author", b =>
                {
                    b.Property<string>("author_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("author_key");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ProductAuthor", b =>
                {
                    b.Property<string>("product_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("author_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("id")
                        .HasColumnType("longtext");

                    b.HasKey("product_id", "author_key");

                    b.HasIndex("author_key");

                    b.ToTable("ProductAuthors");
                });

            modelBuilder.Entity("ProductCount", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("already_read")
                        .HasColumnType("int");

                    b.Property<int>("currently_reading")
                        .HasColumnType("int");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("want_to_read")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("product_id")
                        .IsUnique();

                    b.ToTable("ProductCounts");
                });

            modelBuilder.Entity("bookstore_sv.Models.Product", b =>
                {
                    b.Property<string>("product_id")
                        .HasColumnType("varchar(255)");

                    b.PrimitiveCollection<string>("author_key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("cover")
                        .HasColumnType("int");

                    b.Property<string>("cover_edition_key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("first_publish_year")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity_in_stock")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("product_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("bookstore_sv.Models.ProductInformation", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("isbn_13")
                        .HasColumnType("longtext");

                    b.Property<int>("number_of_pages")
                        .HasColumnType("int");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("publish_date")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("publishers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("subjects")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("product_id")
                        .IsUnique();

                    b.ToTable("ProductInformations");
                });

            modelBuilder.Entity("bookstore_sv.Models.ProductSummary", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("average")
                        .HasColumnType("float");

                    b.Property<int?>("count")
                        .HasColumnType("int");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("sortable")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("product_id")
                        .IsUnique();

                    b.ToTable("ProductSummaries");
                });

            modelBuilder.Entity("bookstore_sv.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("bookstore_sv.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProductAuthor", b =>
                {
                    b.HasOne("Author", "Author")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("author_key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookstore_sv.Models.Product", "Product")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCount", b =>
                {
                    b.HasOne("bookstore_sv.Models.Product", "Product")
                        .WithOne("ProductCount")
                        .HasForeignKey("ProductCount", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bookstore_sv.Models.ProductInformation", b =>
                {
                    b.HasOne("bookstore_sv.Models.Product", "Product")
                        .WithOne("ProductInformation")
                        .HasForeignKey("bookstore_sv.Models.ProductInformation", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bookstore_sv.Models.ProductSummary", b =>
                {
                    b.HasOne("bookstore_sv.Models.Product", "Product")
                        .WithOne("ProductSummary")
                        .HasForeignKey("bookstore_sv.Models.ProductSummary", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bookstore_sv.Models.Token", b =>
                {
                    b.HasOne("bookstore_sv.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Navigation("ProductAuthors");
                });

            modelBuilder.Entity("bookstore_sv.Models.Product", b =>
                {
                    b.Navigation("ProductAuthors");

                    b.Navigation("ProductCount");

                    b.Navigation("ProductInformation")
                        .IsRequired();

                    b.Navigation("ProductSummary");
                });

            modelBuilder.Entity("bookstore_sv.Models.User", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
